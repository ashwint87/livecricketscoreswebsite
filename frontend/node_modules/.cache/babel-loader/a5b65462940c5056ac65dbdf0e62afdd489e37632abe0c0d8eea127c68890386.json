{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/SeriesMatchListContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/SeriesMatchListContext.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeriesMatchListContext = /*#__PURE__*/createContext();\nexport const SeriesMatchListProvider = ({\n  seriesIds = [],\n  children\n}) => {\n  _s();\n  const [seriesMatches, setSeriesMatches] = useState([]);\n  const [loadingMatches, setLoadingMatches] = useState(true);\n  useEffect(() => {\n    if (!seriesIds.length) return;\n    const fetchMatches = async () => {\n      setLoadingMatches(true);\n      try {\n        const results = await Promise.all(seriesIds.map(id => axios.get(`/api/series/${id}/matches`)));\n        const merged = results.flatMap(res => {\n          var _res$data, _res$data$data;\n          return ((_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$data = _res$data.data) === null || _res$data$data === void 0 ? void 0 : _res$data$data.data) || [];\n        });\n        setSeriesMatches(merged);\n      } catch (err) {\n        console.error('Error fetching series matches:', err);\n        setSeriesMatches([]);\n      } finally {\n        setLoadingMatches(false);\n      }\n    };\n    fetchMatches();\n  }, [seriesIds.join(',')]);\n  return /*#__PURE__*/_jsxDEV(SeriesMatchListContext.Provider, {\n    value: {\n      seriesMatches,\n      loadingMatches\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(SeriesMatchListProvider, \"iaC1TqwTkgW7bm6FahAwUfkTZi8=\");\n_c = SeriesMatchListProvider;\nexport const useSeriesMatchList = () => {\n  _s2();\n  return useContext(SeriesMatchListContext);\n};\n_s2(useSeriesMatchList, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SeriesMatchListProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsxDEV","_jsxDEV","SeriesMatchListContext","SeriesMatchListProvider","seriesIds","children","_s","seriesMatches","setSeriesMatches","loadingMatches","setLoadingMatches","length","fetchMatches","results","Promise","all","map","id","get","merged","flatMap","res","_res$data","_res$data$data","data","err","console","error","join","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSeriesMatchList","_s2","$RefreshReg$"],"sources":["/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/SeriesMatchListContext.js"],"sourcesContent":["// src/context/SeriesMatchListContext.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst SeriesMatchListContext = createContext();\n\nexport const SeriesMatchListProvider = ({ seriesIds = [], children }) => {\n  const [seriesMatches, setSeriesMatches] = useState([]);\n  const [loadingMatches, setLoadingMatches] = useState(true);\n\n  useEffect(() => {\n    if (!seriesIds.length) return;\n\n    const fetchMatches = async () => {\n      setLoadingMatches(true);\n      try {\n        const results = await Promise.all(\n          seriesIds.map(id => axios.get(`/api/series/${id}/matches`))\n        );\n        const merged = results.flatMap(res => res.data?.data?.data || []);\n        setSeriesMatches(merged);\n      } catch (err) {\n        console.error('Error fetching series matches:', err);\n        setSeriesMatches([]);\n      } finally {\n        setLoadingMatches(false);\n      }\n    };\n\n    fetchMatches();\n  }, [seriesIds.join(',')]);\n\n  return (\n    <SeriesMatchListContext.Provider value={{ seriesMatches, loadingMatches }}>\n      {children}\n    </SeriesMatchListContext.Provider>\n  );\n};\n\nexport const useSeriesMatchList = () => useContext(SeriesMatchListContext);\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,sBAAsB,gBAAGP,aAAa,CAAC,CAAC;AAE9C,OAAO,MAAMQ,uBAAuB,GAAGA,CAAC;EAAEC,SAAS,GAAG,EAAE;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE1DD,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,SAAS,CAACO,MAAM,EAAE;IAEvB,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/BF,iBAAiB,CAAC,IAAI,CAAC;MACvB,IAAI;QACF,MAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC/BX,SAAS,CAACY,GAAG,CAACC,EAAE,IAAIlB,KAAK,CAACmB,GAAG,CAAC,eAAeD,EAAE,UAAU,CAAC,CAC5D,CAAC;QACD,MAAME,MAAM,GAAGN,OAAO,CAACO,OAAO,CAACC,GAAG;UAAA,IAAAC,SAAA,EAAAC,cAAA;UAAA,OAAI,EAAAD,SAAA,GAAAD,GAAG,CAACG,IAAI,cAAAF,SAAA,wBAAAC,cAAA,GAARD,SAAA,CAAUE,IAAI,cAAAD,cAAA,uBAAdA,cAAA,CAAgBC,IAAI,KAAI,EAAE;QAAA,EAAC;QACjEhB,gBAAgB,CAACW,MAAM,CAAC;MAC1B,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;QACpDjB,gBAAgB,CAAC,EAAE,CAAC;MACtB,CAAC,SAAS;QACRE,iBAAiB,CAAC,KAAK,CAAC;MAC1B;IACF,CAAC;IAEDE,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACR,SAAS,CAACwB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EAEzB,oBACE3B,OAAA,CAACC,sBAAsB,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,aAAa;MAAEE;IAAe,CAAE;IAAAJ,QAAA,EACvEA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACsB,CAAC;AAEtC,CAAC;AAAC5B,EAAA,CA/BWH,uBAAuB;AAAAgC,EAAA,GAAvBhC,uBAAuB;AAiCpC,OAAO,MAAMiC,kBAAkB,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzC,UAAU,CAACM,sBAAsB,CAAC;AAAA;AAACmC,GAAA,CAA9DD,kBAAkB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/SeriesRangesContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/SeriesRangesContext.js\nimport React, { createContext, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { useSeries } from './SeriesContext';\nimport { FORMAT_CODES } from '../constants/matchStatusConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeriesRangesContext = /*#__PURE__*/createContext({\n  seriesRows: [],\n  loadingSeriesRows: true\n});\nexport const useSeriesRanges = () => {\n  _s();\n  return useContext(SeriesRangesContext);\n};\n_s(useSeriesRanges, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst TTL_MS = 6 * 60 * 60 * 1000; // 6 hours\nconst CACHE_KEY = sid => `series_range_${sid}`;\n_c = CACHE_KEY;\nconst extendEndForMatchType = (isoStr, type = '') => {\n  if (!isoStr) return null;\n  const d = new Date(isoStr);\n  const t = String(type || '').toUpperCase();\n  if (t === 'TEST' || t === 'TEST/5DAY') d.setDate(d.getDate() + 4);else if (t === '4DAY') d.setDate(d.getDate() + 3);\n  return d.toISOString();\n};\nexport function SeriesRangesProvider({\n  children\n}) {\n  _s2();\n  const {\n    allSeries,\n    loading\n  } = useSeries();\n  const [seriesRows, setSeriesRows] = useState([]);\n  const [loadingSeriesRows, setLoadingSeriesRows] = useState(true);\n  const memCacheRef = useRef(new Map());\n  const stageIdsAsc = useMemo(() => {\n    const ids = new Set();\n    for (const s of allSeries || []) {\n      const sid = Array.isArray(s.id) ? Math.min(...s.id.map(Number)) : Number(s.id);\n      if (sid) ids.add(sid);\n    }\n    return Array.from(ids).sort((a, b) => a - b);\n  }, [allSeries]);\n  useEffect(() => {\n    if (loading) return;\n    let cancelled = false;\n    const controller = new AbortController();\n    setLoadingSeriesRows(true);\n    const now = Date.now();\n    const readCache = sid => {\n      const inMem = memCacheRef.current.get(String(sid));\n      if (inMem && inMem.exp > now) return inMem.data;\n      try {\n        const raw = localStorage.getItem(CACHE_KEY(sid));\n        if (!raw) return null;\n        const parsed = JSON.parse(raw);\n        if (!parsed || parsed.exp <= now) {\n          localStorage.removeItem(CACHE_KEY(sid));\n          return null;\n        }\n        memCacheRef.current.set(String(sid), {\n          data: parsed.data,\n          exp: parsed.exp\n        });\n        return parsed.data;\n      } catch {\n        return null;\n      }\n    };\n    const writeCache = (sid, data) => {\n      const rec = {\n        data,\n        exp: now + TTL_MS\n      };\n      memCacheRef.current.set(String(sid), rec);\n      try {\n        localStorage.setItem(CACHE_KEY(sid), JSON.stringify(rec));\n      } catch {}\n    };\n\n    // Build tasks (one per base stage id), EXACT logic as SeriesMatchesTab\n    const tasks = stageIdsAsc.map(sid => async () => {\n      var _stageRes$value$data, _stageRes$value$data$, _nextStageRes$value$d, _nextStageRes$value$d2;\n      const cached = readCache(sid);\n      if (cached) return cached;\n\n      // Fetch stage meta for sid and sid+1\n      const nextId = sid + 1;\n      const [stageRes, nextStageRes] = await Promise.allSettled([axios.get(`/api/stages/${sid}`, {\n        signal: controller.signal\n      }), axios.get(`/api/stages/${nextId}`, {\n        signal: controller.signal\n      })]);\n      const stage = stageRes.status === 'fulfilled' ? (_stageRes$value$data = stageRes.value.data) === null || _stageRes$value$data === void 0 ? void 0 : (_stageRes$value$data$ = _stageRes$value$data.data) === null || _stageRes$value$data$ === void 0 ? void 0 : _stageRes$value$data$.data : null;\n      const nextStage = nextStageRes.status === 'fulfilled' ? (_nextStageRes$value$d = nextStageRes.value.data) === null || _nextStageRes$value$d === void 0 ? void 0 : (_nextStageRes$value$d2 = _nextStageRes$value$d.data) === null || _nextStageRes$value$d2 === void 0 ? void 0 : _nextStageRes$value$d2.data : null;\n      let stageIdsToUse = [sid];\n      const includeNext = stage && nextStage && Number(stage.league_id) === Number(nextStage.league_id) && Number(stage.season_id) === Number(nextStage.season_id) && !FORMAT_CODES.includes(String(stage.code || '').toUpperCase());\n      if (includeNext) stageIdsToUse.push(nextId);\n\n      // Fetch matches for the stage(s)\n      const matchResults = await Promise.allSettled(stageIdsToUse.map(id => axios.get(`/api/series/${id}/matches`, {\n        signal: controller.signal\n      })));\n      const matches = matchResults.flatMap(r => {\n        var _r$value$data, _r$value$data$data;\n        return r.status === 'fulfilled' ? ((_r$value$data = r.value.data) === null || _r$value$data === void 0 ? void 0 : (_r$value$data$data = _r$value$data.data) === null || _r$value$data$data === void 0 ? void 0 : _r$value$data$data.data) || [] : [];\n      });\n      matches.sort((a, b) => new Date(a.starting_at) - new Date(b.starting_at));\n      let startDate = null;\n      let endDate = null;\n      if (matches.length) {\n        const first = matches[0];\n        const last = matches[matches.length - 1];\n        startDate = new Date(first.starting_at).toISOString();\n        endDate = extendEndForMatchType(last.starting_at, last.type) || new Date(last.starting_at).toISOString();\n      }\n      const data = {\n        sid,\n        stageIdsToUse,\n        startDate,\n        endDate\n      };\n      writeCache(sid, data);\n      return data;\n    });\n\n    // Run with concurrency limit\n    const MAX_CONCURRENT = 8;\n    const results = new Map();\n    const run = async () => {\n      let idx = 0;\n      const runners = new Array(Math.min(MAX_CONCURRENT, tasks.length)).fill(0).map(async () => {\n        while (idx < tasks.length) {\n          const myIdx = idx++;\n          const sid = stageIdsAsc[myIdx];\n          try {\n            const data = await tasks[myIdx]();\n            results.set(sid, data);\n          } catch (e) {\n            results.set(sid, {\n              sid,\n              stageIdsToUse: [sid],\n              startDate: null,\n              endDate: null\n            });\n          }\n          if (cancelled) return;\n        }\n      });\n      await Promise.all(runners);\n    };\n    (async () => {\n      await run();\n      if (cancelled) return;\n\n      // Build final rows combined with series base obj\n      const list = (allSeries || []).map(s => {\n        const sid = Array.isArray(s.id) ? Math.min(...s.id.map(Number)) : Number(s.id);\n        const res = results.get(sid);\n        const startDate = res !== null && res !== void 0 && res.startDate ? new Date(res.startDate) : null;\n        const endDate = res !== null && res !== void 0 && res.endDate ? new Date(res.endDate) : null;\n        return {\n          base: s,\n          firstStageId: sid,\n          season_id: s.season_id,\n          code: s.code,\n          stage_ids: (res === null || res === void 0 ? void 0 : res.stageIdsToUse) || (Array.isArray(s.stage_ids) ? s.stage_ids : [sid]),\n          startDate,\n          endDate\n        };\n      });\n\n      // Sort ascending by start date (for month grouping)\n      list.sort((a, b) => {\n        var _a$startDate, _b$startDate;\n        return (((_a$startDate = a.startDate) === null || _a$startDate === void 0 ? void 0 : _a$startDate.getTime()) || 0) - (((_b$startDate = b.startDate) === null || _b$startDate === void 0 ? void 0 : _b$startDate.getTime()) || 0);\n      });\n      setSeriesRows(list);\n      setLoadingSeriesRows(false);\n    })();\n    return () => {\n      cancelled = true;\n      controller.abort();\n    };\n  }, [loading, allSeries, stageIdsAsc.join(',')]);\n  const value = useMemo(() => ({\n    seriesRows,\n    loadingSeriesRows\n  }), [seriesRows, loadingSeriesRows]);\n  return /*#__PURE__*/_jsxDEV(SeriesRangesContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s2(SeriesRangesProvider, \"igIkWB+HukTVHYpC5NJMK1bMGFw=\", false, function () {\n  return [useSeries];\n});\n_c2 = SeriesRangesProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"CACHE_KEY\");\n$RefreshReg$(_c2, \"SeriesRangesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useMemo","useRef","useState","axios","useSeries","FORMAT_CODES","jsxDEV","_jsxDEV","SeriesRangesContext","seriesRows","loadingSeriesRows","useSeriesRanges","_s","TTL_MS","CACHE_KEY","sid","_c","extendEndForMatchType","isoStr","type","d","Date","t","String","toUpperCase","setDate","getDate","toISOString","SeriesRangesProvider","children","_s2","allSeries","loading","setSeriesRows","setLoadingSeriesRows","memCacheRef","Map","stageIdsAsc","ids","Set","s","Array","isArray","id","Math","min","map","Number","add","from","sort","a","b","cancelled","controller","AbortController","now","readCache","inMem","current","get","exp","data","raw","localStorage","getItem","parsed","JSON","parse","removeItem","set","writeCache","rec","setItem","stringify","tasks","_stageRes$value$data","_stageRes$value$data$","_nextStageRes$value$d","_nextStageRes$value$d2","cached","nextId","stageRes","nextStageRes","Promise","allSettled","signal","stage","status","value","nextStage","stageIdsToUse","includeNext","league_id","season_id","includes","code","push","matchResults","matches","flatMap","r","_r$value$data","_r$value$data$data","starting_at","startDate","endDate","length","first","last","MAX_CONCURRENT","results","run","idx","runners","fill","myIdx","e","all","list","res","base","firstStageId","stage_ids","_a$startDate","_b$startDate","getTime","abort","join","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/SeriesRangesContext.js"],"sourcesContent":["// src/context/SeriesRangesContext.js\nimport React, { createContext, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { useSeries } from './SeriesContext';\nimport { FORMAT_CODES } from '../constants/matchStatusConstants';\n\nconst SeriesRangesContext = createContext({ seriesRows: [], loadingSeriesRows: true });\n\nexport const useSeriesRanges = () => useContext(SeriesRangesContext);\n\nconst TTL_MS = 6 * 60 * 60 * 1000; // 6 hours\nconst CACHE_KEY = (sid) => `series_range_${sid}`;\n\nconst extendEndForMatchType = (isoStr, type = '') => {\n  if (!isoStr) return null;\n  const d = new Date(isoStr);\n  const t = String(type || '').toUpperCase();\n  if (t === 'TEST' || t === 'TEST/5DAY') d.setDate(d.getDate() + 4);\n  else if (t === '4DAY') d.setDate(d.getDate() + 3);\n  return d.toISOString();\n};\n\nexport function SeriesRangesProvider({ children }) {\n  const { allSeries, loading } = useSeries();\n  const [seriesRows, setSeriesRows] = useState([]);\n  const [loadingSeriesRows, setLoadingSeriesRows] = useState(true);\n  const memCacheRef = useRef(new Map());\n\n  const stageIdsAsc = useMemo(() => {\n    const ids = new Set();\n    for (const s of allSeries || []) {\n      const sid = Array.isArray(s.id) ? Math.min(...s.id.map(Number)) : Number(s.id);\n      if (sid) ids.add(sid);\n    }\n    return Array.from(ids).sort((a, b) => a - b);\n  }, [allSeries]);\n\n  useEffect(() => {\n    if (loading) return;\n    let cancelled = false;\n    const controller = new AbortController();\n    setLoadingSeriesRows(true);\n\n    const now = Date.now();\n\n    const readCache = (sid) => {\n      const inMem = memCacheRef.current.get(String(sid));\n      if (inMem && inMem.exp > now) return inMem.data;\n\n      try {\n        const raw = localStorage.getItem(CACHE_KEY(sid));\n        if (!raw) return null;\n        const parsed = JSON.parse(raw);\n        if (!parsed || parsed.exp <= now) {\n          localStorage.removeItem(CACHE_KEY(sid));\n          return null;\n        }\n        memCacheRef.current.set(String(sid), { data: parsed.data, exp: parsed.exp });\n        return parsed.data;\n      } catch {\n        return null;\n      }\n    };\n\n    const writeCache = (sid, data) => {\n      const rec = { data, exp: now + TTL_MS };\n      memCacheRef.current.set(String(sid), rec);\n      try {\n        localStorage.setItem(CACHE_KEY(sid), JSON.stringify(rec));\n      } catch {}\n    };\n\n    // Build tasks (one per base stage id), EXACT logic as SeriesMatchesTab\n    const tasks = stageIdsAsc.map((sid) => async () => {\n      const cached = readCache(sid);\n      if (cached) return cached;\n\n      // Fetch stage meta for sid and sid+1\n      const nextId = sid + 1;\n      const [stageRes, nextStageRes] = await Promise.allSettled([\n        axios.get(`/api/stages/${sid}`, { signal: controller.signal }),\n        axios.get(`/api/stages/${nextId}`, { signal: controller.signal }),\n      ]);\n      const stage = stageRes.status === 'fulfilled' ? stageRes.value.data?.data?.data : null;\n      const nextStage = nextStageRes.status === 'fulfilled' ? nextStageRes.value.data?.data?.data : null;\n\n      let stageIdsToUse = [sid];\n      const includeNext =\n        stage &&\n        nextStage &&\n        Number(stage.league_id) === Number(nextStage.league_id) &&\n        Number(stage.season_id) === Number(nextStage.season_id) &&\n        !FORMAT_CODES.includes(String(stage.code || '').toUpperCase());\n\n      if (includeNext) stageIdsToUse.push(nextId);\n\n      // Fetch matches for the stage(s)\n      const matchResults = await Promise.allSettled(\n        stageIdsToUse.map((id) => axios.get(`/api/series/${id}/matches`, { signal: controller.signal }))\n      );\n      const matches = matchResults.flatMap((r) =>\n        r.status === 'fulfilled' ? (r.value.data?.data?.data || []) : []\n      );\n\n      matches.sort((a, b) => new Date(a.starting_at) - new Date(b.starting_at));\n\n      let startDate = null;\n      let endDate = null;\n      if (matches.length) {\n        const first = matches[0];\n        const last = matches[matches.length - 1];\n        startDate = new Date(first.starting_at).toISOString();\n        endDate = extendEndForMatchType(last.starting_at, last.type) || new Date(last.starting_at).toISOString();\n      }\n\n      const data = { sid, stageIdsToUse, startDate, endDate };\n      writeCache(sid, data);\n      return data;\n    });\n\n    // Run with concurrency limit\n    const MAX_CONCURRENT = 8;\n    const results = new Map();\n\n    const run = async () => {\n      let idx = 0;\n      const runners = new Array(Math.min(MAX_CONCURRENT, tasks.length)).fill(0).map(async () => {\n        while (idx < tasks.length) {\n          const myIdx = idx++;\n          const sid = stageIdsAsc[myIdx];\n          try {\n            const data = await tasks[myIdx]();\n            results.set(sid, data);\n          } catch (e) {\n            results.set(sid, { sid, stageIdsToUse: [sid], startDate: null, endDate: null });\n          }\n          if (cancelled) return;\n        }\n      });\n      await Promise.all(runners);\n    };\n\n    (async () => {\n      await run();\n      if (cancelled) return;\n\n      // Build final rows combined with series base obj\n      const list = (allSeries || []).map((s) => {\n        const sid = Array.isArray(s.id) ? Math.min(...s.id.map(Number)) : Number(s.id);\n        const res = results.get(sid);\n        const startDate = res?.startDate ? new Date(res.startDate) : null;\n        const endDate = res?.endDate ? new Date(res.endDate) : null;\n        return {\n          base: s,\n          firstStageId: sid,\n          season_id: s.season_id,\n          code: s.code,\n          stage_ids: res?.stageIdsToUse || (Array.isArray(s.stage_ids) ? s.stage_ids : [sid]),\n          startDate,\n          endDate,\n        };\n      });\n\n      // Sort ascending by start date (for month grouping)\n      list.sort((a, b) => (a.startDate?.getTime() || 0) - (b.startDate?.getTime() || 0));\n\n      setSeriesRows(list);\n      setLoadingSeriesRows(false);\n    })();\n\n    return () => {\n      cancelled = true;\n      controller.abort();\n    };\n  }, [loading, allSeries, stageIdsAsc.join(',')]);\n\n  const value = useMemo(() => ({ seriesRows, loadingSeriesRows }), [seriesRows, loadingSeriesRows]);\n\n  return (\n    <SeriesRangesContext.Provider value={value}>\n      {children}\n    </SeriesRangesContext.Provider>\n  );\n}\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC9F,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,YAAY,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,mBAAmB,gBAAGX,aAAa,CAAC;EAAEY,UAAU,EAAE,EAAE;EAAEC,iBAAiB,EAAE;AAAK,CAAC,CAAC;AAEtF,OAAO,MAAMC,eAAe,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMd,UAAU,CAACU,mBAAmB,CAAC;AAAA;AAACI,EAAA,CAAxDD,eAAe;AAE5B,MAAME,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AACnC,MAAMC,SAAS,GAAIC,GAAG,IAAK,gBAAgBA,GAAG,EAAE;AAACC,EAAA,GAA3CF,SAAS;AAEf,MAAMG,qBAAqB,GAAGA,CAACC,MAAM,EAAEC,IAAI,GAAG,EAAE,KAAK;EACnD,IAAI,CAACD,MAAM,EAAE,OAAO,IAAI;EACxB,MAAME,CAAC,GAAG,IAAIC,IAAI,CAACH,MAAM,CAAC;EAC1B,MAAMI,CAAC,GAAGC,MAAM,CAACJ,IAAI,IAAI,EAAE,CAAC,CAACK,WAAW,CAAC,CAAC;EAC1C,IAAIF,CAAC,KAAK,MAAM,IAAIA,CAAC,KAAK,WAAW,EAAEF,CAAC,CAACK,OAAO,CAACL,CAAC,CAACM,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAC7D,IAAIJ,CAAC,KAAK,MAAM,EAAEF,CAAC,CAACK,OAAO,CAACL,CAAC,CAACM,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;EACjD,OAAON,CAAC,CAACO,WAAW,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,SAASC,oBAAoBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACjD,MAAM;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAG5B,SAAS,CAAC,CAAC;EAC1C,MAAM,CAACK,UAAU,EAAEwB,aAAa,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,iBAAiB,EAAEwB,oBAAoB,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAMiC,WAAW,GAAGlC,MAAM,CAAC,IAAImC,GAAG,CAAC,CAAC,CAAC;EAErC,MAAMC,WAAW,GAAGrC,OAAO,CAAC,MAAM;IAChC,MAAMsC,GAAG,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrB,KAAK,MAAMC,CAAC,IAAIT,SAAS,IAAI,EAAE,EAAE;MAC/B,MAAMhB,GAAG,GAAG0B,KAAK,CAACC,OAAO,CAACF,CAAC,CAACG,EAAE,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGL,CAAC,CAACG,EAAE,CAACG,GAAG,CAACC,MAAM,CAAC,CAAC,GAAGA,MAAM,CAACP,CAAC,CAACG,EAAE,CAAC;MAC9E,IAAI5B,GAAG,EAAEuB,GAAG,CAACU,GAAG,CAACjC,GAAG,CAAC;IACvB;IACA,OAAO0B,KAAK,CAACQ,IAAI,CAACX,GAAG,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACrB,SAAS,CAAC,CAAC;EAEfhC,SAAS,CAAC,MAAM;IACd,IAAIiC,OAAO,EAAE;IACb,IAAIqB,SAAS,GAAG,KAAK;IACrB,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxCrB,oBAAoB,CAAC,IAAI,CAAC;IAE1B,MAAMsB,GAAG,GAAGnC,IAAI,CAACmC,GAAG,CAAC,CAAC;IAEtB,MAAMC,SAAS,GAAI1C,GAAG,IAAK;MACzB,MAAM2C,KAAK,GAAGvB,WAAW,CAACwB,OAAO,CAACC,GAAG,CAACrC,MAAM,CAACR,GAAG,CAAC,CAAC;MAClD,IAAI2C,KAAK,IAAIA,KAAK,CAACG,GAAG,GAAGL,GAAG,EAAE,OAAOE,KAAK,CAACI,IAAI;MAE/C,IAAI;QACF,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAACnD,SAAS,CAACC,GAAG,CAAC,CAAC;QAChD,IAAI,CAACgD,GAAG,EAAE,OAAO,IAAI;QACrB,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,GAAG,CAAC;QAC9B,IAAI,CAACG,MAAM,IAAIA,MAAM,CAACL,GAAG,IAAIL,GAAG,EAAE;UAChCQ,YAAY,CAACK,UAAU,CAACvD,SAAS,CAACC,GAAG,CAAC,CAAC;UACvC,OAAO,IAAI;QACb;QACAoB,WAAW,CAACwB,OAAO,CAACW,GAAG,CAAC/C,MAAM,CAACR,GAAG,CAAC,EAAE;UAAE+C,IAAI,EAAEI,MAAM,CAACJ,IAAI;UAAED,GAAG,EAAEK,MAAM,CAACL;QAAI,CAAC,CAAC;QAC5E,OAAOK,MAAM,CAACJ,IAAI;MACpB,CAAC,CAAC,MAAM;QACN,OAAO,IAAI;MACb;IACF,CAAC;IAED,MAAMS,UAAU,GAAGA,CAACxD,GAAG,EAAE+C,IAAI,KAAK;MAChC,MAAMU,GAAG,GAAG;QAAEV,IAAI;QAAED,GAAG,EAAEL,GAAG,GAAG3C;MAAO,CAAC;MACvCsB,WAAW,CAACwB,OAAO,CAACW,GAAG,CAAC/C,MAAM,CAACR,GAAG,CAAC,EAAEyD,GAAG,CAAC;MACzC,IAAI;QACFR,YAAY,CAACS,OAAO,CAAC3D,SAAS,CAACC,GAAG,CAAC,EAAEoD,IAAI,CAACO,SAAS,CAACF,GAAG,CAAC,CAAC;MAC3D,CAAC,CAAC,MAAM,CAAC;IACX,CAAC;;IAED;IACA,MAAMG,KAAK,GAAGtC,WAAW,CAACS,GAAG,CAAE/B,GAAG,IAAK,YAAY;MAAA,IAAA6D,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA;MACjD,MAAMC,MAAM,GAAGvB,SAAS,CAAC1C,GAAG,CAAC;MAC7B,IAAIiE,MAAM,EAAE,OAAOA,MAAM;;MAEzB;MACA,MAAMC,MAAM,GAAGlE,GAAG,GAAG,CAAC;MACtB,MAAM,CAACmE,QAAQ,EAAEC,YAAY,CAAC,GAAG,MAAMC,OAAO,CAACC,UAAU,CAAC,CACxDlF,KAAK,CAACyD,GAAG,CAAC,eAAe7C,GAAG,EAAE,EAAE;QAAEuE,MAAM,EAAEhC,UAAU,CAACgC;MAAO,CAAC,CAAC,EAC9DnF,KAAK,CAACyD,GAAG,CAAC,eAAeqB,MAAM,EAAE,EAAE;QAAEK,MAAM,EAAEhC,UAAU,CAACgC;MAAO,CAAC,CAAC,CAClE,CAAC;MACF,MAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAM,KAAK,WAAW,IAAAZ,oBAAA,GAAGM,QAAQ,CAACO,KAAK,CAAC3B,IAAI,cAAAc,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBd,IAAI,cAAAe,qBAAA,uBAAzBA,qBAAA,CAA2Bf,IAAI,GAAG,IAAI;MACtF,MAAM4B,SAAS,GAAGP,YAAY,CAACK,MAAM,KAAK,WAAW,IAAAV,qBAAA,GAAGK,YAAY,CAACM,KAAK,CAAC3B,IAAI,cAAAgB,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBhB,IAAI,cAAAiB,sBAAA,uBAA7BA,sBAAA,CAA+BjB,IAAI,GAAG,IAAI;MAElG,IAAI6B,aAAa,GAAG,CAAC5E,GAAG,CAAC;MACzB,MAAM6E,WAAW,GACfL,KAAK,IACLG,SAAS,IACT3C,MAAM,CAACwC,KAAK,CAACM,SAAS,CAAC,KAAK9C,MAAM,CAAC2C,SAAS,CAACG,SAAS,CAAC,IACvD9C,MAAM,CAACwC,KAAK,CAACO,SAAS,CAAC,KAAK/C,MAAM,CAAC2C,SAAS,CAACI,SAAS,CAAC,IACvD,CAACzF,YAAY,CAAC0F,QAAQ,CAACxE,MAAM,CAACgE,KAAK,CAACS,IAAI,IAAI,EAAE,CAAC,CAACxE,WAAW,CAAC,CAAC,CAAC;MAEhE,IAAIoE,WAAW,EAAED,aAAa,CAACM,IAAI,CAAChB,MAAM,CAAC;;MAE3C;MACA,MAAMiB,YAAY,GAAG,MAAMd,OAAO,CAACC,UAAU,CAC3CM,aAAa,CAAC7C,GAAG,CAAEH,EAAE,IAAKxC,KAAK,CAACyD,GAAG,CAAC,eAAejB,EAAE,UAAU,EAAE;QAAE2C,MAAM,EAAEhC,UAAU,CAACgC;MAAO,CAAC,CAAC,CACjG,CAAC;MACD,MAAMa,OAAO,GAAGD,YAAY,CAACE,OAAO,CAAEC,CAAC;QAAA,IAAAC,aAAA,EAAAC,kBAAA;QAAA,OACrCF,CAAC,CAACb,MAAM,KAAK,WAAW,GAAI,EAAAc,aAAA,GAAAD,CAAC,CAACZ,KAAK,CAAC3B,IAAI,cAAAwC,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcxC,IAAI,cAAAyC,kBAAA,uBAAlBA,kBAAA,CAAoBzC,IAAI,KAAI,EAAE,GAAI,EAAE;MAAA,CAClE,CAAC;MAEDqC,OAAO,CAACjD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAI/B,IAAI,CAAC8B,CAAC,CAACqD,WAAW,CAAC,GAAG,IAAInF,IAAI,CAAC+B,CAAC,CAACoD,WAAW,CAAC,CAAC;MAEzE,IAAIC,SAAS,GAAG,IAAI;MACpB,IAAIC,OAAO,GAAG,IAAI;MAClB,IAAIP,OAAO,CAACQ,MAAM,EAAE;QAClB,MAAMC,KAAK,GAAGT,OAAO,CAAC,CAAC,CAAC;QACxB,MAAMU,IAAI,GAAGV,OAAO,CAACA,OAAO,CAACQ,MAAM,GAAG,CAAC,CAAC;QACxCF,SAAS,GAAG,IAAIpF,IAAI,CAACuF,KAAK,CAACJ,WAAW,CAAC,CAAC7E,WAAW,CAAC,CAAC;QACrD+E,OAAO,GAAGzF,qBAAqB,CAAC4F,IAAI,CAACL,WAAW,EAAEK,IAAI,CAAC1F,IAAI,CAAC,IAAI,IAAIE,IAAI,CAACwF,IAAI,CAACL,WAAW,CAAC,CAAC7E,WAAW,CAAC,CAAC;MAC1G;MAEA,MAAMmC,IAAI,GAAG;QAAE/C,GAAG;QAAE4E,aAAa;QAAEc,SAAS;QAAEC;MAAQ,CAAC;MACvDnC,UAAU,CAACxD,GAAG,EAAE+C,IAAI,CAAC;MACrB,OAAOA,IAAI;IACb,CAAC,CAAC;;IAEF;IACA,MAAMgD,cAAc,GAAG,CAAC;IACxB,MAAMC,OAAO,GAAG,IAAI3E,GAAG,CAAC,CAAC;IAEzB,MAAM4E,GAAG,GAAG,MAAAA,CAAA,KAAY;MACtB,IAAIC,GAAG,GAAG,CAAC;MACX,MAAMC,OAAO,GAAG,IAAIzE,KAAK,CAACG,IAAI,CAACC,GAAG,CAACiE,cAAc,EAAEnC,KAAK,CAACgC,MAAM,CAAC,CAAC,CAACQ,IAAI,CAAC,CAAC,CAAC,CAACrE,GAAG,CAAC,YAAY;QACxF,OAAOmE,GAAG,GAAGtC,KAAK,CAACgC,MAAM,EAAE;UACzB,MAAMS,KAAK,GAAGH,GAAG,EAAE;UACnB,MAAMlG,GAAG,GAAGsB,WAAW,CAAC+E,KAAK,CAAC;UAC9B,IAAI;YACF,MAAMtD,IAAI,GAAG,MAAMa,KAAK,CAACyC,KAAK,CAAC,CAAC,CAAC;YACjCL,OAAO,CAACzC,GAAG,CAACvD,GAAG,EAAE+C,IAAI,CAAC;UACxB,CAAC,CAAC,OAAOuD,CAAC,EAAE;YACVN,OAAO,CAACzC,GAAG,CAACvD,GAAG,EAAE;cAAEA,GAAG;cAAE4E,aAAa,EAAE,CAAC5E,GAAG,CAAC;cAAE0F,SAAS,EAAE,IAAI;cAAEC,OAAO,EAAE;YAAK,CAAC,CAAC;UACjF;UACA,IAAIrD,SAAS,EAAE;QACjB;MACF,CAAC,CAAC;MACF,MAAM+B,OAAO,CAACkC,GAAG,CAACJ,OAAO,CAAC;IAC5B,CAAC;IAED,CAAC,YAAY;MACX,MAAMF,GAAG,CAAC,CAAC;MACX,IAAI3D,SAAS,EAAE;;MAEf;MACA,MAAMkE,IAAI,GAAG,CAACxF,SAAS,IAAI,EAAE,EAAEe,GAAG,CAAEN,CAAC,IAAK;QACxC,MAAMzB,GAAG,GAAG0B,KAAK,CAACC,OAAO,CAACF,CAAC,CAACG,EAAE,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGL,CAAC,CAACG,EAAE,CAACG,GAAG,CAACC,MAAM,CAAC,CAAC,GAAGA,MAAM,CAACP,CAAC,CAACG,EAAE,CAAC;QAC9E,MAAM6E,GAAG,GAAGT,OAAO,CAACnD,GAAG,CAAC7C,GAAG,CAAC;QAC5B,MAAM0F,SAAS,GAAGe,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEf,SAAS,GAAG,IAAIpF,IAAI,CAACmG,GAAG,CAACf,SAAS,CAAC,GAAG,IAAI;QACjE,MAAMC,OAAO,GAAGc,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEd,OAAO,GAAG,IAAIrF,IAAI,CAACmG,GAAG,CAACd,OAAO,CAAC,GAAG,IAAI;QAC3D,OAAO;UACLe,IAAI,EAAEjF,CAAC;UACPkF,YAAY,EAAE3G,GAAG;UACjB+E,SAAS,EAAEtD,CAAC,CAACsD,SAAS;UACtBE,IAAI,EAAExD,CAAC,CAACwD,IAAI;UACZ2B,SAAS,EAAE,CAAAH,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAE7B,aAAa,MAAKlD,KAAK,CAACC,OAAO,CAACF,CAAC,CAACmF,SAAS,CAAC,GAAGnF,CAAC,CAACmF,SAAS,GAAG,CAAC5G,GAAG,CAAC,CAAC;UACnF0F,SAAS;UACTC;QACF,CAAC;MACH,CAAC,CAAC;;MAEF;MACAa,IAAI,CAACrE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC;QAAA,IAAAwE,YAAA,EAAAC,YAAA;QAAA,OAAK,CAAC,EAAAD,YAAA,GAAAzE,CAAC,CAACsD,SAAS,cAAAmB,YAAA,uBAAXA,YAAA,CAAaE,OAAO,CAAC,CAAC,KAAI,CAAC,KAAK,EAAAD,YAAA,GAAAzE,CAAC,CAACqD,SAAS,cAAAoB,YAAA,uBAAXA,YAAA,CAAaC,OAAO,CAAC,CAAC,KAAI,CAAC,CAAC;MAAA,EAAC;MAElF7F,aAAa,CAACsF,IAAI,CAAC;MACnBrF,oBAAoB,CAAC,KAAK,CAAC;IAC7B,CAAC,EAAE,CAAC;IAEJ,OAAO,MAAM;MACXmB,SAAS,GAAG,IAAI;MAChBC,UAAU,CAACyE,KAAK,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAAC/F,OAAO,EAAED,SAAS,EAAEM,WAAW,CAAC2F,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EAE/C,MAAMvC,KAAK,GAAGzF,OAAO,CAAC,OAAO;IAAES,UAAU;IAAEC;EAAkB,CAAC,CAAC,EAAE,CAACD,UAAU,EAAEC,iBAAiB,CAAC,CAAC;EAEjG,oBACEH,OAAA,CAACC,mBAAmB,CAACyH,QAAQ;IAACxC,KAAK,EAAEA,KAAM;IAAA5D,QAAA,EACxCA;EAAQ;IAAAqG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC;AAACvG,GAAA,CAjKeF,oBAAoB;EAAA,QACHxB,SAAS;AAAA;AAAAkI,GAAA,GAD1B1G,oBAAoB;AAAA,IAAAZ,EAAA,EAAAsH,GAAA;AAAAC,YAAA,CAAAvH,EAAA;AAAAuH,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
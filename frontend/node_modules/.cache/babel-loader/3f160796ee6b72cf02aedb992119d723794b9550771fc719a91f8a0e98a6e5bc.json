{"ast":null,"code":"import _objectSpread from\"/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/context/SeriesRangesContext.js\nimport React,{createContext,useContext,useEffect,useMemo,useRef,useState}from'react';import axios from'axios';import{useSeries}from'./SeriesContext';import{FORMAT_CODES}from'../constants/matchStatusConstants';import{jsx as _jsx}from\"react/jsx-runtime\";const SeriesRangesContext=/*#__PURE__*/createContext({seriesRows:[],loadingSeriesRows:true});export const useSeriesRanges=()=>useContext(SeriesRangesContext);/** Cache (bumped version to invalidate old entries) */const TTL_MS=6*60*60*1000;// 6h\nconst CK=sid=>\"series_range_v3_\".concat(sid);/** Helpers */const addDaysLocal=(date,days)=>{const d=new Date(date);d.setDate(d.getDate()+days);return d;};const perMatchExtraDays=function(){let type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';const t=String(type||'').toUpperCase();if(t==='TEST'||t==='TEST/5DAY')return 4;if(t==='4DAY')return 3;return 0;};export function SeriesRangesProvider(_ref){let{children}=_ref;const{allSeries,loading}=useSeries();const[seriesRows,setSeriesRows]=useState([]);const[loadingSeriesRows,setLoadingSeriesRows]=useState(true);const memCache=useRef(new Map());/** Map stageId -> base series item */const stageMap=useMemo(()=>{const m=new Map();for(const s of allSeries||[]){const sid=Array.isArray(s.id)?Math.min(...s.id.map(Number)):Number(s.id);if(!Number.isFinite(sid))continue;m.set(sid,s);}return m;},[allSeries]);/** Provisional rows (instant, no network). Hydration will correct them. */const provisionalRows=useMemo(()=>{if(!(allSeries!==null&&allSeries!==void 0&&allSeries.length))return[];const used=new Set();const out=[];const sids=Array.from(stageMap.keys()).sort((a,b)=>a-b);for(const sid of sids){if(used.has(sid))continue;const s=stageMap.get(sid);if(!s)continue;const nextId=sid+1;const next=stageMap.get(nextId);// Fast guess (validated later by hydration)\nconst code=String(s.code||'').toUpperCase();const includeNext=!!next&&Number(next.league_id)===Number(s.league_id)&&Number(next.season_id)===Number(s.season_id)&&!FORMAT_CODES.includes(code);const group=includeNext?[s,next]:[s];const stage_ids=includeNext?[sid,nextId]:[sid];const startISO=group.map(g=>g.start_date).filter(Boolean).sort()[0]||null;const last=group[group.length-1];const endBaseISO=(last===null||last===void 0?void 0:last.end_date)||group.map(g=>g.end_date).filter(Boolean).sort().slice(-1)[0]||null;const startDate=startISO?new Date(startISO):null;// provisional end (will be corrected in hydration)\nconst provisionalEnd=endBaseISO?addDaysLocal(endBaseISO,perMatchExtraDays(last===null||last===void 0?void 0:last.code)):null;out.push({base:s,firstStageId:sid,season_id:s.season_id,code:s.code,stage_ids,startDate,endDate:provisionalEnd||(endBaseISO?new Date(endBaseISO):null)});used.add(sid);if(includeNext)used.add(nextId);}// Keep one row per firstStageId for stability\nconst uniq=new Map();for(const r of out){if(!uniq.has(r.firstStageId))uniq.set(r.firstStageId,r);else{const cur=uniq.get(r.firstStageId);const better=!cur.startDate&&r.startDate||!cur.endDate&&r.endDate?r:cur;uniq.set(r.firstStageId,better);}}return Array.from(uniq.values()).sort((a,b)=>{var _a$startDate,_b$startDate;return(((_a$startDate=a.startDate)===null||_a$startDate===void 0?void 0:_a$startDate.getTime())||0)-(((_b$startDate=b.startDate)===null||_b$startDate===void 0?void 0:_b$startDate.getTime())||0);});},[allSeries,stageMap]);useEffect(()=>{if(loading)return;let cancelled=false;const controller=new AbortController();// 1) Paint instantly\nsetSeriesRows(provisionalRows);setLoadingSeriesRows(false);// 2) Hydrate precisely (stage + maybe stage+1 from /api/stages, then matches)\nconst now=Date.now();const readCache=sid=>{const inMem=memCache.current.get(String(sid));if(inMem&&inMem.exp>now)return inMem.data;try{const raw=localStorage.getItem(CK(sid));if(!raw)return null;const parsed=JSON.parse(raw);if(!parsed||parsed.exp<=now){localStorage.removeItem(CK(sid));return null;}memCache.current.set(String(sid),{data:parsed.data,exp:parsed.exp});return parsed.data;}catch(_unused){return null;}};const writeCache=(sid,data)=>{const rec={data,exp:now+TTL_MS};memCache.current.set(String(sid),rec);try{localStorage.setItem(CK(sid),JSON.stringify(rec));}catch(_unused2){}};const tasks=provisionalRows.map(row=>async()=>{var _stageRes$value$data,_stageRes$value$data$,_nextStageRes$value$d,_nextStageRes$value$d2;const sid=row.firstStageId;// Use ms in cache to avoid TZ drift\nconst cached=readCache(sid);if((cached===null||cached===void 0?void 0:cached.startMs)!==undefined&&(cached===null||cached===void 0?void 0:cached.endMs)!==undefined&&Array.isArray(cached.stageIdsToUse)){if(cancelled)return;setSeriesRows(prev=>prev.map(r=>r.firstStageId===sid?_objectSpread(_objectSpread({},r),{},{stage_ids:cached.stageIdsToUse,startDate:cached.startMs!==null?new Date(cached.startMs):r.startDate,endDate:cached.endMs!==null?new Date(cached.endMs):r.endDate}):r));return;}// --- STRICT stage pairing (exactly like SeriesMatchesTab) ---\nconst nextId=sid+1;const[stageRes,nextStageRes]=await Promise.allSettled([axios.get(\"/api/stages/\".concat(sid),{signal:controller.signal}),axios.get(\"/api/stages/\".concat(nextId),{signal:controller.signal})]);const stage=stageRes.status==='fulfilled'?(_stageRes$value$data=stageRes.value.data)===null||_stageRes$value$data===void 0?void 0:(_stageRes$value$data$=_stageRes$value$data.data)===null||_stageRes$value$data$===void 0?void 0:_stageRes$value$data$.data:null;const nextStage=nextStageRes.status==='fulfilled'?(_nextStageRes$value$d=nextStageRes.value.data)===null||_nextStageRes$value$d===void 0?void 0:(_nextStageRes$value$d2=_nextStageRes$value$d.data)===null||_nextStageRes$value$d2===void 0?void 0:_nextStageRes$value$d2.data:null;const includeNext=stage&&nextStage&&Number(stage.league_id)===Number(nextStage.league_id)&&Number(stage.season_id)===Number(nextStage.season_id)&&!FORMAT_CODES.includes(String(stage.code||'').toUpperCase());const stageIdsToUse=includeNext?[sid,nextId]:[sid];// Fetch matches across decided stages\nconst matchResults=await Promise.allSettled(stageIdsToUse.map(id=>axios.get(\"/api/series/\".concat(id,\"/matches\"),{signal:controller.signal})));const matches=matchResults.flatMap(r=>{var _r$value$data,_r$value$data$data;return r.status==='fulfilled'?((_r$value$data=r.value.data)===null||_r$value$data===void 0?void 0:(_r$value$data$data=_r$value$data.data)===null||_r$value$data$data===void 0?void 0:_r$value$data$data.data)||[]:[];});// Compute start = min(starting_at), end = max(starting_at + extraDaysByType)\nlet startMs=null;let endMs=null;if(matches.length){let minStart=Infinity;let maxEnd=-Infinity;for(const m of matches){const start=new Date(m.starting_at);const extra=perMatchExtraDays(m.type);const end=addDaysLocal(start,extra);const sMs=start.getTime();const eMs=end.getTime();if(sMs<minStart)minStart=sMs;if(eMs>maxEnd)maxEnd=eMs;}startMs=isFinite(minStart)?minStart:null;endMs=isFinite(maxEnd)?maxEnd:null;}writeCache(sid,{sid,stageIdsToUse,startMs,endMs});if(cancelled)return;setSeriesRows(prev=>prev.map(r=>r.firstStageId===sid?_objectSpread(_objectSpread({},r),{},{stage_ids:stageIdsToUse,startDate:startMs!==null?new Date(startMs):r.startDate,endDate:endMs!==null?new Date(endMs):r.endDate}):r));});// High concurrency for quick hydration\nconst MAX_CONCURRENT=24;const run=async()=>{let i=0;const runners=new Array(Math.min(MAX_CONCURRENT,tasks.length)).fill(0).map(async()=>{while(i<tasks.length){const idx=i++;try{await tasks[idx]();}catch(_unused3){}if(cancelled)return;}});await Promise.all(runners);};run();return()=>{cancelled=true;controller.abort();};},[loading,provisionalRows]);const value=useMemo(()=>({seriesRows,loadingSeriesRows}),[seriesRows,loadingSeriesRows]);return/*#__PURE__*/_jsx(SeriesRangesContext.Provider,{value:value,children:children});}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useMemo","useRef","useState","axios","useSeries","FORMAT_CODES","jsx","_jsx","SeriesRangesContext","seriesRows","loadingSeriesRows","useSeriesRanges","TTL_MS","CK","sid","concat","addDaysLocal","date","days","d","Date","setDate","getDate","perMatchExtraDays","type","arguments","length","undefined","t","String","toUpperCase","SeriesRangesProvider","_ref","children","allSeries","loading","setSeriesRows","setLoadingSeriesRows","memCache","Map","stageMap","m","s","Array","isArray","id","Math","min","map","Number","isFinite","set","provisionalRows","used","Set","out","sids","from","keys","sort","a","b","has","get","nextId","next","code","includeNext","league_id","season_id","includes","group","stage_ids","startISO","g","start_date","filter","Boolean","last","endBaseISO","end_date","slice","startDate","provisionalEnd","push","base","firstStageId","endDate","add","uniq","r","cur","better","values","_a$startDate","_b$startDate","getTime","cancelled","controller","AbortController","now","readCache","inMem","current","exp","data","raw","localStorage","getItem","parsed","JSON","parse","removeItem","_unused","writeCache","rec","setItem","stringify","_unused2","tasks","row","_stageRes$value$data","_stageRes$value$data$","_nextStageRes$value$d","_nextStageRes$value$d2","cached","startMs","endMs","stageIdsToUse","prev","_objectSpread","stageRes","nextStageRes","Promise","allSettled","signal","stage","status","value","nextStage","matchResults","matches","flatMap","_r$value$data","_r$value$data$data","minStart","Infinity","maxEnd","start","starting_at","extra","end","sMs","eMs","MAX_CONCURRENT","run","i","runners","fill","idx","_unused3","all","abort","Provider"],"sources":["/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/SeriesRangesContext.js"],"sourcesContent":["// src/context/SeriesRangesContext.js\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport axios from 'axios';\nimport { useSeries } from './SeriesContext';\nimport { FORMAT_CODES } from '../constants/matchStatusConstants';\n\nconst SeriesRangesContext = createContext({\n  seriesRows: [],\n  loadingSeriesRows: true,\n});\nexport const useSeriesRanges = () => useContext(SeriesRangesContext);\n\n/** Cache (bumped version to invalidate old entries) */\nconst TTL_MS = 6 * 60 * 60 * 1000; // 6h\nconst CK = (sid) => `series_range_v3_${sid}`;\n\n/** Helpers */\nconst addDaysLocal = (date, days) => {\n  const d = new Date(date);\n  d.setDate(d.getDate() + days);\n  return d;\n};\nconst perMatchExtraDays = (type = '') => {\n  const t = String(type || '').toUpperCase();\n  if (t === 'TEST' || t === 'TEST/5DAY') return 4;\n  if (t === '4DAY') return 3;\n  return 0;\n};\n\nexport function SeriesRangesProvider({ children }) {\n  const { allSeries, loading } = useSeries();\n  const [seriesRows, setSeriesRows] = useState([]);\n  const [loadingSeriesRows, setLoadingSeriesRows] = useState(true);\n  const memCache = useRef(new Map());\n\n  /** Map stageId -> base series item */\n  const stageMap = useMemo(() => {\n    const m = new Map();\n    for (const s of allSeries || []) {\n      const sid = Array.isArray(s.id) ? Math.min(...s.id.map(Number)) : Number(s.id);\n      if (!Number.isFinite(sid)) continue;\n      m.set(sid, s);\n    }\n    return m;\n  }, [allSeries]);\n\n  /** Provisional rows (instant, no network). Hydration will correct them. */\n  const provisionalRows = useMemo(() => {\n    if (!allSeries?.length) return [];\n    const used = new Set();\n    const out = [];\n    const sids = Array.from(stageMap.keys()).sort((a, b) => a - b);\n\n    for (const sid of sids) {\n      if (used.has(sid)) continue;\n      const s = stageMap.get(sid);\n      if (!s) continue;\n\n      const nextId = sid + 1;\n      const next = stageMap.get(nextId);\n\n      // Fast guess (validated later by hydration)\n      const code = String(s.code || '').toUpperCase();\n      const includeNext =\n        !!next &&\n        Number(next.league_id) === Number(s.league_id) &&\n        Number(next.season_id) === Number(s.season_id) &&\n        !FORMAT_CODES.includes(code);\n\n      const group = includeNext ? [s, next] : [s];\n      const stage_ids = includeNext ? [sid, nextId] : [sid];\n\n      const startISO = group.map(g => g.start_date).filter(Boolean).sort()[0] || null;\n      const last = group[group.length - 1];\n      const endBaseISO =\n        last?.end_date ||\n        group.map(g => g.end_date).filter(Boolean).sort().slice(-1)[0] ||\n        null;\n\n      const startDate = startISO ? new Date(startISO) : null;\n      // provisional end (will be corrected in hydration)\n      const provisionalEnd = endBaseISO\n        ? addDaysLocal(endBaseISO, perMatchExtraDays(last?.code))\n        : null;\n\n      out.push({\n        base: s,\n        firstStageId: sid,\n        season_id: s.season_id,\n        code: s.code,\n        stage_ids,\n        startDate,\n        endDate: provisionalEnd || (endBaseISO ? new Date(endBaseISO) : null),\n      });\n\n      used.add(sid);\n      if (includeNext) used.add(nextId);\n    }\n\n    // Keep one row per firstStageId for stability\n    const uniq = new Map();\n    for (const r of out) {\n      if (!uniq.has(r.firstStageId)) uniq.set(r.firstStageId, r);\n      else {\n        const cur = uniq.get(r.firstStageId);\n        const better =\n          (!cur.startDate && r.startDate) ||\n          (!cur.endDate && r.endDate) ? r : cur;\n        uniq.set(r.firstStageId, better);\n      }\n    }\n\n    return Array.from(uniq.values()).sort(\n      (a, b) => (a.startDate?.getTime() || 0) - (b.startDate?.getTime() || 0)\n    );\n  }, [allSeries, stageMap]);\n\n  useEffect(() => {\n    if (loading) return;\n    let cancelled = false;\n    const controller = new AbortController();\n\n    // 1) Paint instantly\n    setSeriesRows(provisionalRows);\n    setLoadingSeriesRows(false);\n\n    // 2) Hydrate precisely (stage + maybe stage+1 from /api/stages, then matches)\n    const now = Date.now();\n\n    const readCache = (sid) => {\n      const inMem = memCache.current.get(String(sid));\n      if (inMem && inMem.exp > now) return inMem.data;\n      try {\n        const raw = localStorage.getItem(CK(sid));\n        if (!raw) return null;\n        const parsed = JSON.parse(raw);\n        if (!parsed || parsed.exp <= now) {\n          localStorage.removeItem(CK(sid));\n          return null;\n        }\n        memCache.current.set(String(sid), { data: parsed.data, exp: parsed.exp });\n        return parsed.data;\n      } catch {\n        return null;\n      }\n    };\n\n    const writeCache = (sid, data) => {\n      const rec = { data, exp: now + TTL_MS };\n      memCache.current.set(String(sid), rec);\n      try {\n        localStorage.setItem(CK(sid), JSON.stringify(rec));\n      } catch {}\n    };\n\n    const tasks = provisionalRows.map((row) => async () => {\n      const sid = row.firstStageId;\n\n      // Use ms in cache to avoid TZ drift\n      const cached = readCache(sid);\n      if (\n        cached?.startMs !== undefined &&\n        cached?.endMs !== undefined &&\n        Array.isArray(cached.stageIdsToUse)\n      ) {\n        if (cancelled) return;\n        setSeriesRows((prev) =>\n          prev.map((r) =>\n            r.firstStageId === sid\n              ? {\n                  ...r,\n                  stage_ids: cached.stageIdsToUse,\n                  startDate: cached.startMs !== null ? new Date(cached.startMs) : r.startDate,\n                  endDate: cached.endMs !== null ? new Date(cached.endMs) : r.endDate,\n                }\n              : r\n          )\n        );\n        return;\n      }\n\n      // --- STRICT stage pairing (exactly like SeriesMatchesTab) ---\n      const nextId = sid + 1;\n      const [stageRes, nextStageRes] = await Promise.allSettled([\n        axios.get(`/api/stages/${sid}`, { signal: controller.signal }),\n        axios.get(`/api/stages/${nextId}`, { signal: controller.signal }),\n      ]);\n\n      const stage = stageRes.status === 'fulfilled' ? stageRes.value.data?.data?.data : null;\n      const nextStage = nextStageRes.status === 'fulfilled' ? nextStageRes.value.data?.data?.data : null;\n\n      const includeNext =\n        stage &&\n        nextStage &&\n        Number(stage.league_id) === Number(nextStage.league_id) &&\n        Number(stage.season_id) === Number(nextStage.season_id) &&\n        !FORMAT_CODES.includes(String(stage.code || '').toUpperCase());\n\n      const stageIdsToUse = includeNext ? [sid, nextId] : [sid];\n\n      // Fetch matches across decided stages\n      const matchResults = await Promise.allSettled(\n        stageIdsToUse.map((id) => axios.get(`/api/series/${id}/matches`, { signal: controller.signal }))\n      );\n      const matches = matchResults.flatMap((r) =>\n        r.status === 'fulfilled' ? (r.value.data?.data?.data || []) : []\n      );\n\n      // Compute start = min(starting_at), end = max(starting_at + extraDaysByType)\n      let startMs = null;\n      let endMs = null;\n\n      if (matches.length) {\n        let minStart = Infinity;\n        let maxEnd = -Infinity;\n\n        for (const m of matches) {\n          const start = new Date(m.starting_at);\n          const extra = perMatchExtraDays(m.type);\n          const end = addDaysLocal(start, extra);\n\n          const sMs = start.getTime();\n          const eMs = end.getTime();\n\n          if (sMs < minStart) minStart = sMs;\n          if (eMs > maxEnd) maxEnd = eMs;\n        }\n        startMs = isFinite(minStart) ? minStart : null;\n        endMs = isFinite(maxEnd) ? maxEnd : null;\n      }\n\n      writeCache(sid, { sid, stageIdsToUse, startMs, endMs });\n\n      if (cancelled) return;\n\n      setSeriesRows((prev) =>\n        prev.map((r) =>\n          r.firstStageId === sid\n            ? {\n                ...r,\n                stage_ids: stageIdsToUse,\n                startDate: startMs !== null ? new Date(startMs) : r.startDate,\n                endDate: endMs !== null ? new Date(endMs) : r.endDate,\n              }\n            : r\n        )\n      );\n    });\n\n    // High concurrency for quick hydration\n    const MAX_CONCURRENT = 24;\n    const run = async () => {\n      let i = 0;\n      const runners = new Array(Math.min(MAX_CONCURRENT, tasks.length)).fill(0).map(async () => {\n        while (i < tasks.length) {\n          const idx = i++;\n          try { await tasks[idx](); } catch {}\n          if (cancelled) return;\n        }\n      });\n      await Promise.all(runners);\n    };\n\n    run();\n\n    return () => {\n      cancelled = true;\n      controller.abort();\n    };\n  }, [loading, provisionalRows]);\n\n  const value = useMemo(\n    () => ({ seriesRows, loadingSeriesRows }),\n    [seriesRows, loadingSeriesRows]\n  );\n\n  return (\n    <SeriesRangesContext.Provider value={value}>\n      {children}\n    </SeriesRangesContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
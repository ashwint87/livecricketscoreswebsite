{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/components/Series.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSeries } from './../context/SeriesContext';\nimport './css/Series.css';\n\n// Same extension rule you use in SeriesMatchesTab (applied to last match type)\n// Here we approximate by series.code; in practice for Test/4Day series this matches.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extendEndByCode = (dateStr, code = '') => {\n  if (!dateStr) return null;\n  const d = new Date(dateStr);\n  const c = String(code || '').toUpperCase();\n  if (c === 'TEST' || c === 'TEST/5DAY') d.setDate(d.getDate() + 4);else if (c === '4DAY') d.setDate(d.getDate() + 3);\n  return d;\n};\nconst fmt = d => {\n  if (!d) return '';\n  const dd = d instanceof Date ? d : new Date(d);\n  if (isNaN(dd.getTime())) return '';\n  // Compact, locale-friendly label (e.g., 31 Aug 2025)\n  return dd.toLocaleDateString('en-GB', {\n    day: '2-digit',\n    month: 'short',\n    year: 'numeric'\n  });\n};\nexport default function Series() {\n  _s();\n  const {\n    allSeries,\n    loading\n  } = useSeries();\n  const [search, setSearch] = useState('');\n\n  /**\n   * Merge adjacent stages (+/- 1) that are the same league, season, code, league name, season label.\n   * - Keep MIN start_date and MAX end_date across merged items\n   * - Collect all stage IDs so the matches tab can still derive the same range\n   * - Use the first (lowest) stage id as the link target; SeriesMatchesTab already adds +1 if needed\n   */\n  const mergedSeries = useMemo(() => {\n    const byKey = new Map();\n    const getStageIds = s => {\n      // series objects sometimes have id as number or array; also may expose stage_ids\n      if (Array.isArray(s.stage_ids) && s.stage_ids.length) return [...s.stage_ids];\n      if (Array.isArray(s.id)) return [...s.id];\n      return [s.id];\n    };\n    allSeries.forEach(s => {\n      const baseKey = `${s.league_id}_${s.season_id}_${s.code}_${s.league}_${s.season}`;\n\n      // If an entry already exists for this baseKey, we may merge it\n      const existing = byKey.get(baseKey);\n      if (!existing) {\n        byKey.set(baseKey, {\n          ...s,\n          // normalize to arrays for easy merging\n          _stageIds: getStageIds(s),\n          _start: s.start_date ? new Date(s.start_date) : null,\n          _end: s.end_date ? new Date(s.end_date) : null\n        });\n      } else {\n        // Merge if any stage is adjacent (+/-1) to any existing stage\n        const newIds = getStageIds(s);\n        const hasAdjacent = existing._stageIds.some(id1 => newIds.some(id2 => Math.abs(Number(id1) - Number(id2)) === 1));\n        if (hasAdjacent) {\n          // Merge ranges and ids\n          existing._stageIds = Array.from(new Set([...existing._stageIds, ...newIds])).sort((a, b) => a - b);\n          const sStart = s.start_date ? new Date(s.start_date) : null;\n          const sEnd = s.end_date ? new Date(s.end_date) : null;\n          if (sStart && (!existing._start || sStart < existing._start)) existing._start = sStart;\n          if (sEnd && (!existing._end || sEnd > existing._end)) existing._end = sEnd;\n\n          // Nothing else to set: we keep the original entryâ€™s other fields\n          byKey.set(baseKey, existing);\n        } else {\n          // Not adjacent; treat as separate block (use a unique suffix to keep distinct)\n          const key2 = `${baseKey}__${s.start_date || 'x'}__${s.end_date || 'y'}`;\n          byKey.set(key2, {\n            ...s,\n            _stageIds: getStageIds(s),\n            _start: s.start_date ? new Date(s.start_date) : null,\n            _end: s.end_date ? new Date(s.end_date) : null\n          });\n        }\n      }\n    });\n\n    // Build final array and extend end date by format code, to match tab behavior\n    const out = Array.from(byKey.values()).map(item => {\n      const firstStageId = Math.min(...item._stageIds.map(Number));\n      const extendedEnd = extendEndByCode(item._end, item.code) || item._end;\n      return {\n        ...item,\n        stage_ids: item._stageIds,\n        firstStageId,\n        startLabel: fmt(item._start),\n        endLabel: fmt(extendedEnd)\n      };\n    });\n\n    // Optional: stable sort by most-recent start date desc\n    out.sort((a, b) => {\n      var _b$_start, _a$_start;\n      return (((_b$_start = b._start) === null || _b$_start === void 0 ? void 0 : _b$_start.getTime()) || 0) - (((_a$_start = a._start) === null || _a$_start === void 0 ? void 0 : _a$_start.getTime()) || 0);\n    });\n    return out;\n  }, [allSeries]);\n  const filtered = useMemo(() => {\n    const q = search.trim().toLowerCase();\n    if (!q) return mergedSeries;\n    return mergedSeries.filter(s => {\n      var _s$name, _s$league;\n      return ((_s$name = s.name) === null || _s$name === void 0 ? void 0 : _s$name.toLowerCase().includes(q)) || ((_s$league = s.league) === null || _s$league === void 0 ? void 0 : _s$league.toLowerCase().includes(q));\n    });\n  }, [mergedSeries, search]);\n  function seriesName(series) {\n    const overrideLeagues = ['ICC World Test Championship', 'One Day International', 'Twenty20 International'];\n    const validTypes = ['T20', 'T10', 'ODI', 'T20I', '4day', 'Test', 'Test/5day', 'List A'];\n    const showType = validTypes.includes(series.series_type) ? ` (${series.series_type})` : '';\n    const nameOnlyKeywords = ['Regular', 'Play Offs', 'County', 'Group'];\n    const name = nameOnlyKeywords.includes(series.name) ? `${series.league}${showType}` : `${series.league}`;\n    const baseName = overrideLeagues.includes(series.league) ? `${series.name}${showType}` : name;\n    return `${baseName} ${series.season}`;\n  }\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"series-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Series\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search series...\",\n      value: search,\n      onChange: e => setSearch(e.target.value),\n      className: \"series-search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"series-grid\",\n      children: filtered.map(series => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/series/${series.firstStageId}/${series.season_id}`,\n        state: {\n          seriesLabel: seriesName(series),\n          seriesCode: series.code,\n          stageIds: series.stage_ids // pass all merged stage IDs (tab still supports deriving +1)\n        },\n        className: \"series-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"series-info\",\n          children: [(series === null || series === void 0 ? void 0 : series.series_type) && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"series-type-tag\",\n            children: series.series_type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: seriesName(series)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), (series.startLabel || series.endLabel) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"series-dates\",\n            children: [series.startLabel && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"series-date\",\n              children: series.startLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 41\n            }, this), series.startLabel && series.endLabel && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"series-date-sep\",\n              children: \" \\u2014 \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 62\n            }, this), series.endLabel && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"series-date\",\n              children: series.endLabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)\n      }, `${series.firstStageId}-${series.season_id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(Series, \"jzkqb5qfDLrr74xNTTpT2Ylxpys=\", false, function () {\n  return [useSeries];\n});\n_c = Series;\nvar _c;\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"names":["React","useMemo","useState","Link","useSeries","jsxDEV","_jsxDEV","extendEndByCode","dateStr","code","d","Date","c","String","toUpperCase","setDate","getDate","fmt","dd","isNaN","getTime","toLocaleDateString","day","month","year","Series","_s","allSeries","loading","search","setSearch","mergedSeries","byKey","Map","getStageIds","s","Array","isArray","stage_ids","length","id","forEach","baseKey","league_id","season_id","league","season","existing","get","set","_stageIds","_start","start_date","_end","end_date","newIds","hasAdjacent","some","id1","id2","Math","abs","Number","from","Set","sort","a","b","sStart","sEnd","key2","out","values","map","item","firstStageId","min","extendedEnd","startLabel","endLabel","_b$_start","_a$_start","filtered","q","trim","toLowerCase","filter","_s$name","_s$league","name","includes","seriesName","series","overrideLeagues","validTypes","showType","series_type","nameOnlyKeywords","baseName","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","value","onChange","e","target","to","state","seriesLabel","seriesCode","stageIds","_c","$RefreshReg$"],"sources":["/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/components/Series.js"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSeries } from './../context/SeriesContext';\nimport './css/Series.css';\n\n// Same extension rule you use in SeriesMatchesTab (applied to last match type)\n// Here we approximate by series.code; in practice for Test/4Day series this matches.\nconst extendEndByCode = (dateStr, code = '') => {\n  if (!dateStr) return null;\n  const d = new Date(dateStr);\n  const c = String(code || '').toUpperCase();\n  if (c === 'TEST' || c === 'TEST/5DAY') d.setDate(d.getDate() + 4);\n  else if (c === '4DAY') d.setDate(d.getDate() + 3);\n  return d;\n};\n\nconst fmt = (d) => {\n  if (!d) return '';\n  const dd = d instanceof Date ? d : new Date(d);\n  if (isNaN(dd.getTime())) return '';\n  // Compact, locale-friendly label (e.g., 31 Aug 2025)\n  return dd.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' });\n};\n\nexport default function Series() {\n  const { allSeries, loading } = useSeries();\n  const [search, setSearch] = useState('');\n\n  /**\n   * Merge adjacent stages (+/- 1) that are the same league, season, code, league name, season label.\n   * - Keep MIN start_date and MAX end_date across merged items\n   * - Collect all stage IDs so the matches tab can still derive the same range\n   * - Use the first (lowest) stage id as the link target; SeriesMatchesTab already adds +1 if needed\n   */\n  const mergedSeries = useMemo(() => {\n    const byKey = new Map();\n\n    const getStageIds = (s) => {\n      // series objects sometimes have id as number or array; also may expose stage_ids\n      if (Array.isArray(s.stage_ids) && s.stage_ids.length) return [...s.stage_ids];\n      if (Array.isArray(s.id)) return [...s.id];\n      return [s.id];\n    };\n\n    allSeries.forEach((s) => {\n      const baseKey = `${s.league_id}_${s.season_id}_${s.code}_${s.league}_${s.season}`;\n\n      // If an entry already exists for this baseKey, we may merge it\n      const existing = byKey.get(baseKey);\n\n      if (!existing) {\n        byKey.set(baseKey, {\n          ...s,\n          // normalize to arrays for easy merging\n          _stageIds: getStageIds(s),\n          _start: s.start_date ? new Date(s.start_date) : null,\n          _end:   s.end_date ? new Date(s.end_date) : null,\n        });\n      } else {\n        // Merge if any stage is adjacent (+/-1) to any existing stage\n        const newIds = getStageIds(s);\n        const hasAdjacent =\n          existing._stageIds.some(id1 =>\n            newIds.some(id2 => Math.abs(Number(id1) - Number(id2)) === 1)\n          );\n\n        if (hasAdjacent) {\n          // Merge ranges and ids\n          existing._stageIds = Array.from(new Set([...existing._stageIds, ...newIds])).sort((a,b) => a - b);\n          const sStart = s.start_date ? new Date(s.start_date) : null;\n          const sEnd   = s.end_date ? new Date(s.end_date) : null;\n\n          if (sStart && (!existing._start || sStart < existing._start)) existing._start = sStart;\n          if (sEnd   && (!existing._end   || sEnd   > existing._end))   existing._end   = sEnd;\n\n          // Nothing else to set: we keep the original entryâ€™s other fields\n          byKey.set(baseKey, existing);\n        } else {\n          // Not adjacent; treat as separate block (use a unique suffix to keep distinct)\n          const key2 = `${baseKey}__${s.start_date || 'x'}__${s.end_date || 'y'}`;\n          byKey.set(key2, {\n            ...s,\n            _stageIds: getStageIds(s),\n            _start: s.start_date ? new Date(s.start_date) : null,\n            _end:   s.end_date ? new Date(s.end_date) : null,\n          });\n        }\n      }\n    });\n\n    // Build final array and extend end date by format code, to match tab behavior\n    const out = Array.from(byKey.values()).map(item => {\n      const firstStageId = Math.min(...item._stageIds.map(Number));\n      const extendedEnd = extendEndByCode(item._end, item.code) || item._end;\n\n      return {\n        ...item,\n        stage_ids: item._stageIds,\n        firstStageId,\n        startLabel: fmt(item._start),\n        endLabel: fmt(extendedEnd),\n      };\n    });\n\n    // Optional: stable sort by most-recent start date desc\n    out.sort((a, b) => (b._start?.getTime() || 0) - (a._start?.getTime() || 0));\n\n    return out;\n  }, [allSeries]);\n\n  const filtered = useMemo(() => {\n    const q = search.trim().toLowerCase();\n    if (!q) return mergedSeries;\n    return mergedSeries.filter((s) =>\n      s.name?.toLowerCase().includes(q) || s.league?.toLowerCase().includes(q)\n    );\n  }, [mergedSeries, search]);\n\n  function seriesName(series) {\n    const overrideLeagues = ['ICC World Test Championship', 'One Day International', 'Twenty20 International'];\n    const validTypes = ['T20', 'T10', 'ODI', 'T20I', '4day', 'Test', 'Test/5day', 'List A'];\n    const showType = validTypes.includes(series.series_type) ? ` (${series.series_type})` : '';\n\n    const nameOnlyKeywords = ['Regular', 'Play Offs', 'County', 'Group'];\n    const name = nameOnlyKeywords.includes(series.name)\n      ? `${series.league}${showType}`\n      : `${series.league}`;\n\n    const baseName = overrideLeagues.includes(series.league)\n      ? `${series.name}${showType}`\n      : name;\n\n    return `${baseName} ${series.season}`;\n  }\n\n  if (loading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"series-container\">\n      <h1>All Series</h1>\n\n      <input\n        type=\"text\"\n        placeholder=\"Search series...\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        className=\"series-search\"\n      />\n\n      <div className=\"series-grid\">\n        {filtered.map(series => (\n          <Link\n            key={`${series.firstStageId}-${series.season_id}`}\n            to={`/series/${series.firstStageId}/${series.season_id}`}\n            state={{\n              seriesLabel: seriesName(series),\n              seriesCode: series.code,\n              stageIds: series.stage_ids,    // pass all merged stage IDs (tab still supports deriving +1)\n            }}\n            className=\"series-card\"\n          >\n            <div className=\"series-info\">\n              {series?.series_type && (\n                <span className=\"series-type-tag\">{series.series_type}</span>\n              )}\n              <h4>{seriesName(series)}</h4>\n\n              {/* Start & End dates that MATCH SeriesMatchesTab */}\n              {(series.startLabel || series.endLabel) && (\n                <div className=\"series-dates\">\n                  {series.startLabel && <span className=\"series-date\">{series.startLabel}</span>}\n                  {(series.startLabel && series.endLabel) && <span className=\"series-date-sep\"> â€” </span>}\n                  {series.endLabel && <span className=\"series-date\">{series.endLabel}</span>}\n                </div>\n              )}\n            </div>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
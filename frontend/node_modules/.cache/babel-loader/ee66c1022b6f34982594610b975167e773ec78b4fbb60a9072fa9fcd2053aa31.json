{"ast":null,"code":"var _jsxFileName = \"/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/PlayerRankingsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerRankingsContext = /*#__PURE__*/createContext();\nexport const PlayerRankingsProvider = ({\n  children,\n  format = 't20i',\n  role = 'batting',\n  gender = 'mens',\n  limit = 5\n}) => {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [meta, setMeta] = useState({\n    format,\n    role,\n    gender\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        setLoading(true);\n        const params = new URLSearchParams({\n          format,\n          role,\n          gender,\n          limit: String(limit)\n        });\n        const res = await fetch(`/api/player-rankings?${params.toString()}`);\n        const data = await res.json();\n        setPlayers((data === null || data === void 0 ? void 0 : data.data) || []);\n        setMeta({\n          format: (data === null || data === void 0 ? void 0 : data.format) || format,\n          role: (data === null || data === void 0 ? void 0 : data.role) || role,\n          gender: (data === null || data === void 0 ? void 0 : data.gender) || gender\n        });\n      } catch (err) {\n        console.error('Error fetching player rankings:', err);\n        setPlayers([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlayers();\n  }, [format, role, gender, limit]);\n  return /*#__PURE__*/_jsxDEV(PlayerRankingsContext.Provider, {\n    value: {\n      players,\n      meta,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerRankingsProvider, \"Dz0/F8j9a/upQMARNm7AaI5YFcU=\");\n_c = PlayerRankingsProvider;\nexport const usePlayerRankings = () => {\n  _s2();\n  return useContext(PlayerRankingsContext);\n};\n_s2(usePlayerRankings, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerRankingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","PlayerRankingsContext","PlayerRankingsProvider","children","format","role","gender","limit","_s","players","setPlayers","meta","setMeta","loading","setLoading","fetchPlayers","params","URLSearchParams","String","res","fetch","toString","data","json","err","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayerRankings","_s2","$RefreshReg$"],"sources":["/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/PlayerRankingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst PlayerRankingsContext = createContext();\n\nexport const PlayerRankingsProvider = ({ children, format = 't20i', role = 'batting', gender = 'mens', limit = 5 }) => {\n  const [players, setPlayers] = useState([]);\n  const [meta, setMeta] = useState({ format, role, gender });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        setLoading(true);\n        const params = new URLSearchParams({ format, role, gender, limit: String(limit) });\n        const res = await fetch(`/api/player-rankings?${params.toString()}`);\n        const data = await res.json();\n        setPlayers(data?.data || []);\n        setMeta({ format: data?.format || format, role: data?.role || role, gender: data?.gender || gender });\n      } catch (err) {\n        console.error('Error fetching player rankings:', err);\n        setPlayers([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlayers();\n  }, [format, role, gender, limit]);\n\n  return (\n    <PlayerRankingsContext.Provider value={{ players, meta, loading }}>\n      {children}\n    </PlayerRankingsContext.Provider>\n  );\n};\n\nexport const usePlayerRankings = () => useContext(PlayerRankingsContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,qBAAqB,gBAAGN,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMO,sBAAsB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,MAAM,GAAG,MAAM;EAAEC,IAAI,GAAG,SAAS;EAAEC,MAAM,GAAG,MAAM;EAAEC,KAAK,GAAG;AAAE,CAAC,KAAK;EAAAC,EAAA;EACrH,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC;IAAEM,MAAM;IAAEC,IAAI;IAAEC;EAAO,CAAC,CAAC;EAC1D,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMkB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACFD,UAAU,CAAC,IAAI,CAAC;QAChB,MAAME,MAAM,GAAG,IAAIC,eAAe,CAAC;UAAEb,MAAM;UAAEC,IAAI;UAAEC,MAAM;UAAEC,KAAK,EAAEW,MAAM,CAACX,KAAK;QAAE,CAAC,CAAC;QAClF,MAAMY,GAAG,GAAG,MAAMC,KAAK,CAAC,wBAAwBJ,MAAM,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC;QACpE,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7Bb,UAAU,CAAC,CAAAY,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,KAAI,EAAE,CAAC;QAC5BV,OAAO,CAAC;UAAER,MAAM,EAAE,CAAAkB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAElB,MAAM,KAAIA,MAAM;UAAEC,IAAI,EAAE,CAAAiB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEjB,IAAI,KAAIA,IAAI;UAAEC,MAAM,EAAE,CAAAgB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEhB,MAAM,KAAIA;QAAO,CAAC,CAAC;MACvG,CAAC,CAAC,OAAOkB,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,GAAG,CAAC;QACrDd,UAAU,CAAC,EAAE,CAAC;MAChB,CAAC,SAAS;QACRI,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACX,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,KAAK,CAAC,CAAC;EAEjC,oBACEP,OAAA,CAACC,qBAAqB,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEnB,OAAO;MAAEE,IAAI;MAAEE;IAAQ,CAAE;IAAAV,QAAA,EAC/DA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACqB,CAAC;AAErC,CAAC;AAACxB,EAAA,CA7BWN,sBAAsB;AAAA+B,EAAA,GAAtB/B,sBAAsB;AA+BnC,OAAO,MAAMgC,iBAAiB,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMvC,UAAU,CAACK,qBAAqB,CAAC;AAAA;AAACkC,GAAA,CAA5DD,iBAAiB;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
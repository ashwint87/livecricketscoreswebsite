{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const ScheduleContext=/*#__PURE__*/createContext();export const ScheduleProvider=_ref=>{let{children}=_ref;const[scheduleMatches,setScheduleMatches]=useState([]);const[liveMatches,setLiveMatches]=useState([]);const[loading,setLoading]=useState(true);// Fetch non-live (scheduled, completed) matches\nuseEffect(()=>{const fetchSchedule=async()=>{try{const res=await fetch('/api/schedule');const data=await res.json();setScheduleMatches((data===null||data===void 0?void 0:data.data)||[]);}catch(err){console.error('Error fetching schedule:',err);}};fetchSchedule();},[]);useEffect(()=>{const fetchLiveMatches=async()=>{try{var _res$data;const res=await axios.get('/api/live-matches');const liveData=(_res$data=res.data)===null||_res$data===void 0?void 0:_res$data.data;if(Array.isArray(liveData)){setLiveMatches(liveData);}else if(Array.isArray(liveData===null||liveData===void 0?void 0:liveData.data)){// Some Sportmonks responses wrap inside another `.data`\nsetLiveMatches(liveData.data);}else{console.warn('Live matches not in expected array format:',liveData);setLiveMatches([]);// prevent crash by setting empty array\n}}catch(err){console.error('Error fetching live matches:',err);setLiveMatches([]);// fallback\n}finally{setLoading(false);}};fetchLiveMatches();},[]);const allMatches=[...liveMatches,...scheduleMatches];return/*#__PURE__*/_jsx(ScheduleContext.Provider,{value:{matches:allMatches,loading},children:children});};export const useSchedule=()=>useContext(ScheduleContext);","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","axios","jsx","_jsx","ScheduleContext","ScheduleProvider","_ref","children","scheduleMatches","setScheduleMatches","liveMatches","setLiveMatches","loading","setLoading","fetchSchedule","res","fetch","data","json","err","console","error","fetchLiveMatches","_res$data","get","liveData","Array","isArray","warn","allMatches","Provider","value","matches","useSchedule"],"sources":["/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/context/ScheduleContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst ScheduleContext = createContext();\n\nexport const ScheduleProvider = ({ children }) => {\n  const [scheduleMatches, setScheduleMatches] = useState([]);\n  const [liveMatches, setLiveMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch non-live (scheduled, completed) matches\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      try {\n        const res = await fetch('/api/schedule');\n        const data = await res.json();\n        setScheduleMatches(data?.data || []);\n      } catch (err) {\n        console.error('Error fetching schedule:', err);\n      }\n    };\n    fetchSchedule();\n  }, []);\n\nuseEffect(() => {\n  const fetchLiveMatches = async () => {\n    try {\n      const res = await axios.get('/api/live-matches');\n      const liveData = res.data?.data;\n\n      if (Array.isArray(liveData)) {\n        setLiveMatches(liveData);\n      } else if (Array.isArray(liveData?.data)) {\n        // Some Sportmonks responses wrap inside another `.data`\n        setLiveMatches(liveData.data);\n      } else {\n        console.warn('Live matches not in expected array format:', liveData);\n        setLiveMatches([]); // prevent crash by setting empty array\n      }\n    } catch (err) {\n      console.error('Error fetching live matches:', err);\n      setLiveMatches([]); // fallback\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  fetchLiveMatches();\n}, []);\n\n  const allMatches = [...liveMatches, ...scheduleMatches];\n\n  return (\n    <ScheduleContext.Provider value={{ matches: allMatches, loading }}>\n      {children}\n    </ScheduleContext.Provider>\n  );\n};\n\nexport const useSchedule = () => useContext(ScheduleContext);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC7E,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1B,KAAM,CAAAC,eAAe,cAAGP,aAAa,CAAC,CAAC,CAEvC,MAAO,MAAM,CAAAQ,gBAAgB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3C,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAACU,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAE5C;AACAD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAe,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,CAAC,eAAe,CAAC,CACxC,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,GAAG,CAACG,IAAI,CAAC,CAAC,CAC7BT,kBAAkB,CAAC,CAAAQ,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEA,IAAI,GAAI,EAAE,CAAC,CACtC,CAAE,MAAOE,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAEF,GAAG,CAAC,CAChD,CACF,CAAC,CACDL,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAERf,SAAS,CAAC,IAAM,CACd,KAAM,CAAAuB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,KAAAC,SAAA,CACF,KAAM,CAAAR,GAAG,CAAG,KAAM,CAAAd,KAAK,CAACuB,GAAG,CAAC,mBAAmB,CAAC,CAChD,KAAM,CAAAC,QAAQ,EAAAF,SAAA,CAAGR,GAAG,CAACE,IAAI,UAAAM,SAAA,iBAARA,SAAA,CAAUN,IAAI,CAE/B,GAAIS,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,CAAE,CAC3Bd,cAAc,CAACc,QAAQ,CAAC,CAC1B,CAAC,IAAM,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAER,IAAI,CAAC,CAAE,CACxC;AACAN,cAAc,CAACc,QAAQ,CAACR,IAAI,CAAC,CAC/B,CAAC,IAAM,CACLG,OAAO,CAACQ,IAAI,CAAC,4CAA4C,CAAEH,QAAQ,CAAC,CACpEd,cAAc,CAAC,EAAE,CAAC,CAAE;AACtB,CACF,CAAE,MAAOQ,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAEF,GAAG,CAAC,CAClDR,cAAc,CAAC,EAAE,CAAC,CAAE;AACtB,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDS,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEJ,KAAM,CAAAO,UAAU,CAAG,CAAC,GAAGnB,WAAW,CAAE,GAAGF,eAAe,CAAC,CAEvD,mBACEL,IAAA,CAACC,eAAe,CAAC0B,QAAQ,EAACC,KAAK,CAAE,CAAEC,OAAO,CAAEH,UAAU,CAAEjB,OAAQ,CAAE,CAAAL,QAAA,CAC/DA,QAAQ,CACe,CAAC,CAE/B,CAAC,CAED,MAAO,MAAM,CAAA0B,WAAW,CAAGA,CAAA,GAAMnC,UAAU,CAACM,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
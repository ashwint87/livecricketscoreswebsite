{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import{useNavigate,useParams}from'react-router-dom';import{FORMAT_CODES}from'./../../constants/matchStatusConstants';import{useSeriesMatchList}from'./../../context/SeriesMatchListContext';import MatchCard from'./../SeriesMatchCard';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function SeriesMatchesTab(){const{seriesId}=useParams();const{seriesMatches,loadingMatches}=useSeriesMatchList();const[matches,setMatches]=useState([]);const[loading,setLoading]=useState(true);const[startDate,setStartDate]=useState(null);const[endDate,setEndDate]=useState(null);useEffect(()=>{const processMatches=async()=>{setLoading(true);try{const stageId=parseInt(seriesId);const nextStageId=stageId+1;// Fetch both current and next stage metadata\nconst[stageRes,nextStageRes]=await Promise.allSettled([axios.get(\"/api/stages/\".concat(stageId)),axios.get(\"/api/stages/\".concat(nextStageId))]);const stage=stageRes.status==='fulfilled'?stageRes.value.data.data.data:null;const nextStage=nextStageRes.status==='fulfilled'?nextStageRes.value.data.data.data:null;let stageIds=[stageId];const shouldIncludeNext=stage&&nextStage&&stage.league_id===nextStage.league_id&&stage.season_id===nextStage.season_id&&!FORMAT_CODES.includes((stage.code||'').toUpperCase());if(shouldIncludeNext){stageIds.push(nextStageId);}const filtered=seriesMatches.filter(m=>stageIds.includes(m.stage_id));setMatches(filtered);if(filtered.length>0){setStartDate(filtered[0].starting_at);let lastDate=new Date(filtered[filtered.length-1].starting_at);let match=filtered[filtered.length-1];const matchType=(match.type||'').toUpperCase();if(matchType==='TEST'||matchType==='TEST/5DAY'){lastDate.setDate(lastDate.getDate()+4);}else if(matchType==='4DAY'){lastDate.setDate(lastDate.getDate()+3);}setEndDate(lastDate.toISOString());}}catch(err){console.error('Error processing matches from context:',err);setMatches([]);}finally{setLoading(false);}};processMatches();},[seriesId,seriesMatches]);const formattedDate=input=>{if(!input)return'N/A';try{return new Date(input).toLocaleDateString();}catch(e){return'Invalid date';}};return/*#__PURE__*/_jsx(_Fragment,{children:loading&&loadingMatches?/*#__PURE__*/_jsx(\"p\",{children:\"Loading matches...\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[startDate&&endDate&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Start Date:\"}),\" \",formattedDate(startDate)]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"End Date:\"}),\" \",formattedDate(endDate)]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"series-match-cards-row\",children:matches.map(match=>/*#__PURE__*/_jsx(MatchCard,{match:match},match.id))})]})});}","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useParams","FORMAT_CODES","useSeriesMatchList","MatchCard","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SeriesMatchesTab","seriesId","seriesMatches","loadingMatches","matches","setMatches","loading","setLoading","startDate","setStartDate","endDate","setEndDate","processMatches","stageId","parseInt","nextStageId","stageRes","nextStageRes","Promise","allSettled","get","concat","stage","status","value","data","nextStage","stageIds","shouldIncludeNext","league_id","season_id","includes","code","toUpperCase","push","filtered","filter","m","stage_id","length","starting_at","lastDate","Date","match","matchType","type","setDate","getDate","toISOString","err","console","error","formattedDate","input","toLocaleDateString","e","children","className","map","id"],"sources":["/Users/ashwin.r1/Downloads/live-cricket-scores-main/frontend/src/components/series/SeriesMatchesTab.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { FORMAT_CODES } from './../../constants/matchStatusConstants';\nimport { useSeriesMatchList } from './../../context/SeriesMatchListContext';\nimport MatchCard from './../SeriesMatchCard';\n\nexport default function SeriesMatchesTab() {\n  const { seriesId } = useParams();  \n  const { seriesMatches, loadingMatches } = useSeriesMatchList();\n  const [matches, setMatches] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n\n  useEffect(() => {\n    const processMatches = async () => {\n      setLoading(true);\n\n      try {\n        const stageId = parseInt(seriesId);\n        const nextStageId = stageId + 1;\n\n        // Fetch both current and next stage metadata\n        const [stageRes, nextStageRes] = await Promise.allSettled([\n          axios.get(`/api/stages/${stageId}`),\n          axios.get(`/api/stages/${nextStageId}`)\n        ]);\n\n        const stage = stageRes.status === 'fulfilled' ? stageRes.value.data.data.data : null;\n        const nextStage = nextStageRes.status === 'fulfilled' ? nextStageRes.value.data.data.data : null;\n\n        let stageIds = [stageId];\n\n        const shouldIncludeNext =\n          stage &&\n          nextStage &&\n          stage.league_id === nextStage.league_id &&\n          stage.season_id === nextStage.season_id &&\n          !FORMAT_CODES.includes((stage.code || '').toUpperCase());\n\n        if (shouldIncludeNext) {\n          stageIds.push(nextStageId);\n        }\n\n        const filtered = seriesMatches.filter(m => stageIds.includes(m.stage_id));\n        setMatches(filtered);\n\n        if (filtered.length > 0) {\n          setStartDate(filtered[0].starting_at);\n\n          let lastDate = new Date(filtered[filtered.length - 1].starting_at);\n          let match = filtered[filtered.length - 1];\n          const matchType = (match.type || '').toUpperCase();\n\n          if (matchType === 'TEST' || matchType === 'TEST/5DAY') {\n            lastDate.setDate(lastDate.getDate() + 4);\n          } else if (matchType === '4DAY') {\n            lastDate.setDate(lastDate.getDate() + 3);\n          }\n          setEndDate(lastDate.toISOString());\n        }\n      } catch (err) {\n        console.error('Error processing matches from context:', err);\n        setMatches([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    processMatches();\n  }, [seriesId, seriesMatches]);\n\n  const formattedDate = (input) => {\n    if (!input) return 'N/A';\n    try {\n      return new Date(input).toLocaleDateString();\n    } catch (e) {\n      return 'Invalid date';\n    }\n  };\n\n  return (\n    <>\n      {loading && loadingMatches ? (\n        <p>Loading matches...</p>\n      ) : (\n        <>\n          {startDate && endDate && (\n            <>\n              <p><strong>Start Date:</strong> {formattedDate(startDate)}</p>\n              <p><strong>End Date:</strong> {formattedDate(endDate)}</p>\n            </>\n          )}\n          <div className=\"series-match-cards-row\">\n            {matches.map(match => (\n              <MatchCard key={match.id} match={match} />\n            ))}\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}